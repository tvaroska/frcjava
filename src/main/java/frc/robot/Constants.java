package frc.robot;

/**
 * Application-wide constants.
 * Hardware-specific swerve constants are in TunerConstants (generated by Tuner X).
 */
public class Constants {

    /**
     * Robot variant identification.
     */
    public static final class RobotIdentity {
        /**
         * MAC addresses for robot auto-detection.
         * Replace these with your actual robot MAC addresses.
         * To find MAC address: run `ip link` on RoboRIO or check admin panel.
         */
        public static final String ROBOT_A_MAC = "00:80:2F:17:D7:E1";  // Practice robot
        public static final String ROBOT_B_MAC = "00:80:2F:17:D7:E2";  // Competition robot

        /** Default robot when MAC address is unknown (for simulation/development) */
        public static final String DEFAULT_ROBOT = "RobotA";
    }

    /**
     * Operator interface configuration.
     */
    public static final class OperatorConstants {
        /** USB port for driver Xbox controller */
        public static final int DRIVER_CONTROLLER_PORT = 0;
    }

    /**
     * Drivetrain control constants.
     */
    public static final class DriveConstants {
        /** Maximum angular rate in rotations per second */
        public static final double MAX_ANGULAR_RATE = 0.75;

        /** Slew rate limit for acceleration (units per second) */
        public static final double SLEW_RATE_LIMIT = 3.0;

        /** Deadband percentage for joystick inputs */
        public static final double DEADBAND_PERCENT = 0.1;
    }

    /**
     * Vision system constants.
     */
    public static final class VisionConstants {
        /** PhotonVision camera name (must match name in PhotonVision UI) */
        public static final String CAMERA_NAME = "photonvision";

        /** P-controller gain for rotation alignment */
        public static final double ROTATION_P = 0.05;

        /** P-controller gain for forward drive control */
        public static final double DRIVE_P = 0.1;

        /** Angle tolerance for alignment completion (degrees) */
        public static final double ANGLE_TOLERANCE = 2.0;

        /** Target area percentage for desired distance (~1.5-2m away) */
        public static final double AREA_TARGET = 8.0;

        /** Area tolerance for distance completion */
        public static final double AREA_TOLERANCE = 1.0;

        /** Minimum rotation speed (rad/s) */
        public static final double MIN_ROTATION_SPEED = 0.1;

        /** Maximum rotation speed (rad/s) */
        public static final double MAX_ROTATION_SPEED = 2.0;

        /** Minimum drive speed (m/s) */
        public static final double MIN_DRIVE_SPEED = 0.2;

        /** Maximum drive speed (m/s) */
        public static final double MAX_DRIVE_SPEED = 1.5;

        /** Maximum yaw error before stopping forward drive (degrees) */
        public static final double MAX_YAW_ERROR_FOR_DRIVE = 15.0;
    }
}
